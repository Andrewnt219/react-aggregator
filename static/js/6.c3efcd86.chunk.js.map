{"version":3,"sources":["hooks/useTitle.js","components/ui/Button/Button.js","components/ui/Modal/Modal.js","components/ui/Modal/Modal.module.scss","components/ui/Button/Button.module.scss","hoc/withErrorHandler.js","components/Auth/Input/Input.js","components/Auth/Form.module.scss","components/ui/LoadingIndicator/LoadingIndicator.js","components/Auth/Input/Input.module.scss","components/ui/LoadingIndicator/LoadingIndicator.module.scss","containers/Auth/Auth.module.scss","components/Auth/RegisterForm/RegisterForm.js","components/Auth/LoginForm/LoginForm.js","containers/Auth/Auth.js"],"names":["useTitle","title","useEffect","document","Button","children","clicked","htmlAttrs","className","classes","onClick","Modal","show","div","initial","y","x","opacity","animate","transition","duration","module","exports","withHandler","Component","props","error","useSelector","selectError","dispatch","useDispatch","setError","hasError","style","width","margin","Input","isTextArea","inputSetting","name","label","register","handleChange","errorInput","errors","htmlFor","onBlur","triggerValidation","onChange","id","ref","messages","Object","entries","map","type","message","Error","key","LoadingIndicator","size","height","loader","RegisterForm","onSubmit","isLoading","useForm","validateCriteriaMode","handleSubmit","watch","watchPassword","Form","placeholder","required","pattern","value","minLength","validate","LoginForm","withErrorHandler","isLoggedIn","selectIsLoggedIn","useState","isLogin","setIsLogin","selectIsLoading","data","displayName","firstName","lastName","setIsLoading","auth","from","location","state","pathname","form","switchContainer","color","to"],"mappings":"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","file":"static/js/6.c3efcd86.chunk.js","sourcesContent":["import { useEffect } from 'react'\r\n\r\n\r\nfunction useTitle(title) {\r\n  \r\n    useEffect(() => {\r\n        document.title = title\r\n    }, [title])\r\n}\r\n\r\nexport default useTitle\r\n","import React from 'react'\r\nimport classes from './Button.module.scss'\r\n\r\nfunction Button({ children, clicked, ...htmlAttrs }) {\r\n    return (\r\n        <button\r\n            className={classes.Button}\r\n            onClick={clicked}\r\n            {...htmlAttrs}>\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport classes from './Modal.module.scss'\r\nimport {motion } from 'framer-motion'\r\n\r\nfunction Modal({ children, clicked, show }) {\r\n\r\n    return (\r\n        show && <motion.div\r\n            onClick={clicked}\r\n            className={classes.Modal}\r\n            initial={{ y: \"-200vh\", x: \"-50%\", opacity: 0 }}\r\n            animate={{ y: \"-50%\", x: \"-50%\", opacity: 1 }}\r\n            transition={{ duration: .4}}\r\n        >\r\n            {children}\r\n            <p>(Click to dismiss)</p>\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nexport default Modal\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1G7WC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2rCO2\"};","import React from 'react'\r\nimport Modal from 'components/ui/Modal/Modal'\r\nimport { selectError, setError, /* selectLoading */ } from 'features/uiSlice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nfunction withHandler(Component) {\r\n    return props => {\r\n        const error = useSelector(selectError);\r\n        // const loading = useSelector(selectLoading);\r\n        const dispatch = useDispatch();\r\n\r\n        function dismissError() {\r\n            dispatch(setError({ hasError: false }));\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Modal show={error} clicked={dismissError}>\r\n                    {error !== false\r\n                        ? <h3 style={{width: 'max-content', margin: '0 auto'}}>{error}</h3>\r\n                        : <h1 style={{width: 'max-content', margin: '0 auto'}}>Something went wrong</h1>\r\n                    }\r\n                </Modal>\r\n                {/* {loading && <Spinner /> } */}\r\n                <Component {...props} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withHandler\r\n","import { ErrorMessage } from 'react-hook-form'\r\nimport React from 'react'\r\nimport classes from './Input.module.scss'\r\n\r\nconst Input = ({ isTextArea, inputSetting, name, label, register, handleChange, ...htmlAttrs }) => {\r\n    const errorInput = inputSetting.errors[name] ? classes.hasError : null;\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            {label && <label htmlFor={name}>{label}</label>}\r\n\r\n            {isTextArea\r\n                ? <textarea\r\n                    className={errorInput}\r\n                    onBlur={() => inputSetting.triggerValidation(name)}\r\n                    onChange={handleChange}\r\n                    id={name}\r\n                    name={name}\r\n                    ref={register}\r\n                    {...htmlAttrs} />\r\n                : <input\r\n                    className={errorInput}\r\n                    onBlur={() => inputSetting.triggerValidation(name)}\r\n                    onChange={handleChange}\r\n                    id={name}\r\n                    name={name}\r\n                    ref={register}\r\n                    {...htmlAttrs} />}\r\n\r\n            {inputSetting.errors && <ErrorMessage errors={inputSetting.errors} name={name}>\r\n                {({ messages }) =>\r\n                    messages &&\r\n                    Object.entries(messages).map(([type, message]) => <p className={classes.Error} key={type}>{message}</p>)\r\n                }\r\n            </ErrorMessage>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__2Pd6l\"};","import React from 'react'\r\nimport classes from './LoadingIndicator.module.scss'\r\n\r\nfunction LoadingIndicator({size}) {\r\n    return (\r\n        <span style={{width: size, height: size}} className={classes.loader}></span>\r\n    )\r\n}\r\n\r\nexport default LoadingIndicator\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hasError\":\"Input_hasError__8TsnN\",\"Input\":\"Input_Input__24ePG\",\"Error\":\"Input_Error__NDrEY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"LoadingIndicator_loader__1F33x\",\"load8\":\"LoadingIndicator_load8__1imH0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switchContainer\":\"Auth_switchContainer__glttb\"};","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport Input from '../Input/Input';\r\nimport classes from '../Form.module.scss';\r\nimport Button from 'components/ui/Button/Button';\r\nimport LoadingIndicator from 'components/ui/LoadingIndicator/LoadingIndicator';\r\n\r\nfunction RegisterForm({ onSubmit, isLoading }) {\r\n    const { register, handleSubmit, errors, watch, triggerValidation } = useForm({ validateCriteriaMode: \"all\" });\r\n    const watchPassword = watch(\"password\");\r\n    const inputSetting = { errors, triggerValidation };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={classes.Form}>\r\n            <h1>Sign Up</h1>\r\n            <Input\r\n                type=\"text\"\r\n                inputSetting={inputSetting}\r\n                register={register}\r\n                name=\"firstName\"\r\n                placeholder=\"First Name\"\r\n                title=\"Please enter your first name\"\r\n                label=\"First name\" />\r\n\r\n            <Input\r\n                type=\"text\"\r\n                name=\"lastName\"\r\n                label=\"Last Name\"\r\n                inputSetting={inputSetting}\r\n                register={register}\r\n                placeholder=\"Last name\" />\r\n\r\n\r\n            <Input\r\n                type=\"text\"\r\n                inputSetting={inputSetting}\r\n                register={register({required: 'Display name is required'})}\r\n                name=\"displayName\"\r\n                placeholder=\"Display Name\"\r\n                title=\"Please enter your display name\"\r\n                label=\"Display Name\" />\r\n\r\n            <Input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                inputSetting={inputSetting}\r\n                label=\"Email\"\r\n                placeholder=\"example@ex.com\"\r\n                register={register({\r\n                    required: \"Email is required\",\r\n                    pattern: {\r\n                        value: /@.*\\..+$/,\r\n                        message: \"Invalid email format\"\r\n                    },\r\n                    minLength: {\r\n                        value: 6,\r\n                        message: \"Min length is 6\"\r\n                    }\r\n                })} />\r\n\r\n\r\n            <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                placeholder=\"Password\"\r\n                inputSetting={inputSetting}\r\n                register={register({\r\n                    required: \"Password is required\",\r\n                    minLength: {\r\n                        value: 6,\r\n                        message: \"Password is at least 6 characters\"\r\n                    }\r\n                })} />\r\n\r\n            <Input\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Confirm your password\"\r\n                inputSetting={inputSetting}\r\n                register={register({\r\n                    validate: value => value === watchPassword || \"Password does not match\"\r\n                })} />\r\n\r\n            {isLoading ? <LoadingIndicator size=\"1rem\" /> : <Button type=\"submit\">SUBMIT</Button>}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport Input from '../Input/Input';\r\nimport classes from '../Form.module.scss';\r\nimport Button from 'components/ui/Button/Button';\r\nimport LoadingIndicator from 'components/ui/LoadingIndicator/LoadingIndicator';\r\n\r\n\r\nfunction LoginForm({ onSubmit, isLoading }) {\r\n    const { register, handleSubmit, errors, triggerValidation } = useForm();\r\n    const inputSetting = { errors, triggerValidation };\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={classes.Form}>\r\n            <h1>Login</h1>\r\n            <Input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                inputSetting={inputSetting}\r\n                label=\"Email\"\r\n                placeholder=\"example@ex.com\"\r\n                register={register} />\r\n\r\n\r\n            <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                placeholder=\"password\"\r\n                inputSetting={inputSetting}\r\n                register={register} />\r\n\r\n            {isLoading ? <LoadingIndicator size=\"1rem\" /> : <Button type=\"submit\">SUBMIT</Button>}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import RegisterForm from \"components/Auth/RegisterForm/RegisterForm\";\r\nimport withErrorHandler from 'hoc/withErrorHandler'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { auth, selectIsLoggedIn, selectIsLoading, setIsLoading } from 'features/authSlice'\r\nimport LoginForm from \"components/Auth/LoginForm/LoginForm\";\r\nimport classes from './Auth.module.scss'\r\nimport { Redirect } from \"react-router-dom\";\r\nimport useTitle from \"hooks/useTitle\";\r\n\r\n\r\nfunction Auth(props) {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n    const dispatch = useDispatch();\r\n    const [isLogin, setIsLogin] = useState(true);\r\n    const isLoading = useSelector(selectIsLoading);\r\n\r\n    useTitle(isLogin ? 'Login' : 'Signup');\r\n\r\n    function onSubmit(data) {\r\n        data = { ...data, displayName: data.displayName ? data.displayName : data.firstName + ' ' + data.lastName };\r\n        dispatch(setIsLoading({ isLoading: true }));\r\n        dispatch(auth({ data, isLogin }));\r\n    }\r\n\r\n    const {from} = props.location.state || {from: {pathname: \"account/me\"}}\r\n\r\n    let form = (\r\n        <>\r\n            <LoginForm onSubmit={onSubmit} isLoading={isLoading} />\r\n            <div className={classes.switchContainer}>\r\n                <span style={{ color: '#bbb' }}>New to Aggregator? </span>\r\n                <span onClick={() => setIsLogin(false)}>Create an account</span>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n    if (!isLogin) {\r\n\r\n        form = (\r\n            <>\r\n                <RegisterForm onSubmit={onSubmit} isLoading={isLoading} />\r\n                <div className={classes.switchContainer}>\r\n                    <span style={{ color: '#bbb' }}>Already have an account? </span>\r\n                    <span onClick={() => setIsLogin(true)}>Sign in</span>\r\n                </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    return isLoggedIn ? <Redirect to={from.pathname} /> : form\r\n\r\n}\r\n\r\nexport default withErrorHandler(Auth)\r\n"],"sourceRoot":""}